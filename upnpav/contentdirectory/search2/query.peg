{
package search2
}

SearchCrit <- exp:( Asterisk / LogicExp / SearchExp ) EOF {
	return exp, nil
}

Asterisk <- '*' {
	return AllExpr{}, nil
}

LogicExp <- e1:SearchExp _+ op:LogicOp _+ e2:SearchExp {
	return LogicExpr{Op: op.(LogicOp), SubExprs: []Expr{e1.(Expr), e2.(Expr)}}, nil
}

SearchExp <-
	BinExp /
	ExistsExp /
	'(' _* exp:SearchExp _* ')' {
		return exp.(Expr), nil
	}

ExistsExp <- p:Property _+ "exists" _+ b:Bool {
	return ExistsExpr{Property: p.(string), Exists: b.(bool)}, nil
}

BinExp <- p:Property _+ op:BinOp _+ v:String {
	return BinaryExpr{Property: p.(string), Op: op.(BinaryOp), Operand: v.(string)}, nil
}

BinOp <- StringOp / RelOp

StringOp <-
	"contains"        { return Contains,       nil } /
	"doesNotContain"  { return DoesNotContain, nil } /
	"derivedfrom"     { return DerivedFrom,    nil }

RelOp <-
	"="   { return Equal,            nil } /
	"!="  { return NotEqual,         nil } /
	"<="  { return LessThanEqual,    nil } /
	"<"   { return LessThan,         nil } /
	">="  { return GreaterThanEqual, nil } /
	">"   { return GreaterThan,      nil }

LogicOp <-
	"and"  { return And, nil } /
	"or"   { return Or,  nil }

Property <- [a-z:.]+ {
	return string(c.text), nil
}
String <- '"' [a-z:.]+ '"' {
	return string(c.text), nil
}
Bool <- "true" { return true, nil } / "false" { return false, nil }

_ "whitespace" <- [ \t\r\n]

EOF <- !.
